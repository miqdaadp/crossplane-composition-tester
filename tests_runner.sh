#!/bin/bash
#
# Helper script to run the BDD Behave tests for Crossplane compositions
# Generated online by https://argbash.io/generate
#
# ARG_OPTIONAL_REPEATED([tags],[t],[tags to filter the scenarios to run from the feature files; multiple tags can be provided and they are combined with 'AND'])
# ARG_OPTIONAL_BOOLEAN([debug],[d],[enable debug mode],[off])
# ARG_POSITIONAL_SINGLE([composition-project-dir],[directory of crossplane compositions project that contains a pkg folder],[])
# ARG_POSITIONAL_SINGLE([tests-dir],[directory where the BDD feature files are placed],[composition-tests])
# ARG_HELP([Runner of crossplane composition tests])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='tdh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_tests_dir="composition-tests"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_tags=()
_arg_debug="off"


print_help()
{
	printf '%s\n' "Runner of crossplane composition tests"
	printf 'Usage: %s [-t|--tags <arg>] [-d|--(no-)debug] [-h|--help] <composition-project-dir> [<tests-dir>]\n' "$0"
	printf '\t%s\n' "<composition-project-dir>: directory of crossplane compositions project that contains a pkg folder"
	printf '\t%s\n' "<tests-dir>: directory where the BDD feature files are placed (default: 'composition-tests')"
	printf '\t%s\n' "-t, --tags: tags to filter the scenarios to run from the feature files; multiple tags can be provided and they are combined with 'AND' (empty by default)"
	printf '\t%s\n' "-d, --debug, --no-debug: enable debug mode (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-t|--tags)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_tags+=("$2")
				shift
				;;
			--tags=*)
				_arg_tags+=("${_key##--tags=}")
				;;
			-t*)
				_arg_tags+=("${_key##-t}")
				;;
			-d|--no-debug|--debug)
				_arg_debug="on"
				test "${1:0:5}" = "--no-" && _arg_debug="off"
				;;
			-d*)
				_arg_debug="on"
				_next="${_key##-d}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-d" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'composition-project-dir'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require between 1 and 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 1 and 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_composition_project_dir _arg_tests_dir "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# Get the formatter cucumber_json.py from https://github.com/Xray-App/tutorial-python-behave

TARGET_PROJECT_DIR=$_arg_composition_project_dir
TESTS_SUB_DIR=$_arg_tests_dir

LINK_TARGET_PROJECT_DIR=".target_project"

echo "Checking Crossplane cli version ..."
CROSSPLANE_MIN_VERSION="v1.17.3"
CROSSPLANE_CLIENT_VERSION=$(crossplane version --client)
# CROSSPLANE_CLIENT_VERSION="Client Version: v1.16.1"
CROSSPLANE_VERSION=${CROSSPLANE_CLIENT_VERSION#*Version: }

# verify that the Crossplane version is at least the minimum required
if [ "$(printf '%s\n' "$CROSSPLANE_VERSION" "$CROSSPLANE_MIN_VERSION" | sort -V | head -n1)" = "$CROSSPLANE_MIN_VERSION" ]; then
    echo "Crossplane version $CROSSPLANE_VERSION is at least the minimum required $CROSSPLANE_MIN_VERSION"
else
    echo "Crossplane version $CROSSPLANE_VERSION is not at least the minimum required $CROSSPLANE_MIN_VERSION"
    exit 1
fi


echo "Execute the tests from project folder $TARGET_PROJECT_DIR and tests subfolder $TESTS_SUB_DIR"


if [ "$_arg_debug" = on ]
then
    export COMPOSITION_TESTER_DEBUG_MODE="true"
fi

if [ -z "$_arg_tags" ]; then
    echo "Running all tests"
else
    echo "Running tests with tags: ${_arg_tags[@]}"
	PARAM_TAGS=""
	for tag in "${_arg_tags[@]}"
	do
		PARAM_TAGS="$PARAM_TAGS -t $tag"
	done
fi

# check if the target_tests already exists and it is a link (if it is, delete it)
[ -L $LINK_TARGET_PROJECT_DIR ] && rm $LINK_TARGET_PROJECT_DIR
ln -sv $TARGET_PROJECT_DIR $LINK_TARGET_PROJECT_DIR

# Set the PYTHONPATH to the current directory to be able to import cucumber_json.py
export PYTHONPATH=.

behave --junit \
    -f allure_behave.formatter:AllureFormatter -o allure_reports \
    -f cucumber_json:PrettyCucumberJSONFormatter -o cucumber_reports/cucumber_report.json \
    -f pretty \
    $PARAM_TAGS \
    $LINK_TARGET_PROJECT_DIR/$TESTS_SUB_DIR

ret_code=$?

if [ "$_arg_debug" = on ]
then
    echo "==============================================================================="
    echo "DEBUG MODE: check dump folder for observed and desired dumps of each iteration!"
    echo "==============================================================================="
fi

exit $ret_code

# ] <-- needed because of Argbash